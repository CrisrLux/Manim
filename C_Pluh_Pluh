from manim import *
from numpy import *
class C_Pluh_Pluh(ThreeDScene):
    
    def construct(self):
        self.create_lorenz_attractor()

    def lorenz_system(self, pos, sigma=10, rho=28, beta=8/3):
        x, y, z = pos
        dx_dt = sigma * (y - x)
        dy_dt = x * (rho - z) - y
        dz_dt = x * y - beta * z
        return np.array([dx_dt, dy_dt, dz_dt])
    
    def create_lorenz_attractor(self):
        pos = np.array([-1.0, 1.0, 0.0])
        dt = 0.001
        steps = 40000
        scale_factor = 1.0
        dt_scaling_factor = 0.4
        min_rate = float("inf")
        max_rate = float("-inf")
        for i in range(steps):
            dp = self.lorenz_system(pos) * dt
            rate = np.linalg.norm(dp)
            min_rate = min(min_rate, rate)
            max_rate = max(max_rate, rate)
            pos += dp
    
        curve = ParametricFunction(
            lambda t: pos,
            t_range=[0, 3*TAU, .01],
            color = BLUE,
             # FIX ME! Add arguments here.
        )
        

       
        curve.scale(scale_factor)
        curve.move_to(ORIGIN)

        self.set_camera_orientation(phi=80 * DEGREES, theta= 45 * DEGREES)
        self.begin_ambient_camera_rotation(rate=0.8)
        lorenz_equation = MathTex(r"\begin{cases} \dot{x} = \sigma(y - x) \\ \dot{y} = x(\rho - z) - y \\ \dot{z} = xy - \beta z \end{cases}").scale(0.8)
        lorenz_equation.to_edge(UL)
        self.add_fixed_in_frame_mobjects(lorenz_equation)
        self.play(Write(lorenz_equation), run_time=2)
        self.play(Create(curve), run_time=20, rate_func=linear)
        self.wait()
